from pathlib import Path

def GenerateTopasScripts(BaseDirectory, iteration, **variable_dict):
    """
    This file simply returns a list object, where each list entry corresponds to
    a line in the topas script.
    When it is called from an Optimiser object,it will receive a dictionary that contains the current values of 
    the variables you set up in optimisation_params when you initialised the optimiser.
    """
    
    SimpleBeam = []
    SimpleBeam.append('# Set threading self:')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('i:Ts/NumberOfThreads = 0  ')
    SimpleBeam.append('i:Ts/ShowHistoryCountAtInterval = 1000000')
    SimpleBeam.append('b:Ts/ShowHistoryCountOnSingleLine = "True"')
    SimpleBeam.append('')
    SimpleBeam.append('# Add World:')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('s:Ge/World/Type = "TsBox"')
    SimpleBeam.append('s:Ge/World/Material = "Air"')
    SimpleBeam.append('d:Ge/World/HLX = 250 mm ')
    SimpleBeam.append('d:Ge/World/HLY = 250 mm')
    SimpleBeam.append('d:Ge/World/HLZ = 1200.0 mm')
    SimpleBeam.append('d:Ge/World/RotX = 0. deg')
    SimpleBeam.append('d:Ge/World/RotY = 0. deg')
    SimpleBeam.append('d:Ge/World/RotZ = 0. deg')
    SimpleBeam.append('')
    SimpleBeam.append('d:Ge/SID = 1000 mm')
    SimpleBeam.append('d:Ge/SecondaryCollimatorOffset = 20 mm')
    SimpleBeam.append('')
    SimpleBeam.append('# Ta scattering foil')
    SimpleBeam.append('# ------------------------------------------------------------')
    SimpleBeam.append('s:Ge/TaFoil/Type               = "TsCylinder"')
    SimpleBeam.append('s:Ge/TaFoil/Parent             = "World"')
    SimpleBeam.append('s:Ge/TaFoil/Material           = "G4_Ta"')
    SimpleBeam.append('d:Ge/TaFoil/TransX             = 0 cm')
    SimpleBeam.append('d:Ge/TaFoil/TransY             = 0 cm')
    SimpleBeam.append('d:Ge/TaFoil/TransZ             = Ge/SID mm')
    SimpleBeam.append('d:Ge/TaFoil/RotX               = 0 deg')
    SimpleBeam.append('d:Ge/TaFoil/RotY               = 0 deg')
    SimpleBeam.append('d:Ge/TaFoil/RotZ               = 0 deg')
    SimpleBeam.append('d:Ge/TaFoil/RMax               = 10 mm')
    SimpleBeam.append('d:Ge/TaFoil/HL                 = 0.1 mm')
    SimpleBeam.append('s:Ge/TaFoil/Color              = "lightblue"')
    SimpleBeam.append('')
    SimpleBeam.append('# Al scattering foil')
    SimpleBeam.append('# ------------------------------------------------------------')
    SimpleBeam.append('s:Ge/AlFoil/Type               = "TsCylinder"')
    SimpleBeam.append('s:Ge/AlFoil/Parent             = "World"')
    SimpleBeam.append('s:Ge/AlFoil/Material           = "G4_Al"')
    SimpleBeam.append('d:Ge/AlFoil/TransX             = 0 cm')
    SimpleBeam.append('d:Ge/AlFoil/TransY             = 0 cm')
    SimpleBeam.append('d:Ge/AlFoil/foil_offset        = 24.9 mm')
    SimpleBeam.append('d:Ge/AlFoil/TransZ             = Ge/TaFoil/TransZ - Ge/AlFoil/foil_offset mm')
    SimpleBeam.append('d:Ge/AlFoil/RotX               = 0 deg')
    SimpleBeam.append('d:Ge/AlFoil/RotY               = 0 deg')
    SimpleBeam.append('d:Ge/AlFoil/RotZ               = 0 deg')
    SimpleBeam.append('d:Ge/AlFoil/RMax               = 10 mm')
    SimpleBeam.append('d:Ge/AlFoil/HL                 = 1. mm')
    SimpleBeam.append('s:Ge/AlFoil/Color              = "red"')
    SimpleBeam.append('')
    SimpleBeam.append('# Add phase space scorer below foils:')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('# s:Ge/Magic/Type     = "TsBox"')
    SimpleBeam.append('# s:Ge/Magic/Parent   = "World"')
    SimpleBeam.append('# s:Ge/Magic/Material = "Vacuum"')
    SimpleBeam.append('# d:Ge/Magic/HLX      = 100 mm')
    SimpleBeam.append('# d:Ge/Magic/HLY      = 100 mm')
    SimpleBeam.append('# d:Ge/Magic/HLZ      = 1 mm')
    SimpleBeam.append('# d:Ge/Magic/TransX   = 0. cm')
    SimpleBeam.append('# d:Ge/Magic/TransY   = 0. cm')
    SimpleBeam.append('# d:Ge/Magic/TransZ   = Ge/AlFoil/TransZ - 3 mm')
    SimpleBeam.append('# d:Ge/Magic/RotX     = 0. deg')
    SimpleBeam.append('# d:Ge/Magic/RotY     = 0. deg')
    SimpleBeam.append('# d:Ge/Magic/RotZ     = 0. deg')
    SimpleBeam.append('# s:Ge/Magic/Color    = "skyblue"')
    SimpleBeam.append('# s:Ge/Magic/DrawingStyle = "wireframe"')
    SimpleBeam.append('')
    SimpleBeam.append('')
    SimpleBeam.append('# s:Sc/PhaseSpaceFromColl/Quantity                    = "PhaseSpace"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/OutputToConsole             = "False"')
    SimpleBeam.append('# s:Sc/PhaseSpaceFromColl/Surface                     = "Magic/ZMinusSurface"')
    SimpleBeam.append('# s:Sc/PhaseSpaceFromColl/OutputType                  = "Binary" # ASCII, Binary, Limited or ROOT')
    SimpleBeam.append('# s:Sc/PhaseSpaceFromColl/OutputFile                  = "Results/scattered_phase_space"')
    SimpleBeam.append('# i:Sc/PhaseSpaceFromColl/OutputBufferSize            = 1000')
    SimpleBeam.append('# #s:Sc/PhaseSpaceFromColl/OnlyIncludeParticlesGoing  = "In"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeTOPASTime            = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeTimeOfFlight         = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeRunID                = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeEventID              = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeTrackID              = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeParentID             = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeCreatorProcess       = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeVertexInfo           = "False"')
    SimpleBeam.append('# b:Sc/PhaseSpaceFromColl/IncludeSeed                 = "False"')
    SimpleBeam.append('')
    SimpleBeam.append('')
    SimpleBeam.append('# # Beam parameters (parameterised source):')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('s:So/Beam/Type                     = "Beam"')
    SimpleBeam.append('sc:So/Beam/Component                = "ElectronSource"')
    SimpleBeam.append('sc:So/Beam/BeamParticle             = "e-"')
    SimpleBeam.append(f'dc:So/Beam/BeamEnergy               = {variable_dict["BeamEnergy"]} MeV')
    SimpleBeam.append(f'uc:So/Beam/BeamEnergySpread         = {variable_dict["BeamEnergySpread"]}')
    SimpleBeam.append('sc:So/Beam/BeamPositionDistribution = "Gaussian" ')
    SimpleBeam.append('sc:So/Beam/BeamAngularDistribution  = "Gaussian" ')
    SimpleBeam.append('sc:So/Beam/BeamPositionCutoffShape = "Ellipse"')
    SimpleBeam.append(f'dc:So/Beam/BeamPositionCutoffX = {variable_dict["BeamPositionCutoff"]} mm')
    SimpleBeam.append(f'dc:So/Beam/BeamPositionCutoffY = {variable_dict["BeamPositionCutoff"]} mm')
    SimpleBeam.append(f'dc:So/Beam/BeamPositionSpreadX = {variable_dict["BeamPositionSpread"]} mm')
    SimpleBeam.append(f'dc:So/Beam/BeamPositionSpreadY = {variable_dict["BeamPositionSpread"]} mm')
    SimpleBeam.append(f'dc:So/Beam/BeamAngularCutoffX = {variable_dict["BeamAngularCutoff"]} deg')
    SimpleBeam.append(f'dc:So/Beam/BeamAngularCutoffY = {variable_dict["BeamAngularCutoff"]} deg')
    SimpleBeam.append(f'dc:So/Beam/BeamAngularSpreadX = {variable_dict["BeamAngularSpread"]} deg')
    SimpleBeam.append(f'dc:So/Beam/BeamAngularSpreadY = {variable_dict["BeamAngularSpread"]} deg')
    SimpleBeam.append('ic:So/Beam/NumberOfHistoriesInRun = 5000000')
    SimpleBeam.append('# ic:So/Beam/NumberOfHistoriesInRun = 500')
    SimpleBeam.append('')
    SimpleBeam.append('# # Electron source position')
    SimpleBeam.append('# ------------------------------------------------------------')
    SimpleBeam.append('s:Ge/ElectronSource/Parent = "World"')
    SimpleBeam.append('s:Ge/ElectronSource/Type="TsSPhere"')
    SimpleBeam.append('d:Ge/ElectronSource/Rmax = 5 mm')
    SimpleBeam.append('d:Ge/ElectronSource/TransZ = 1100 mm')
    SimpleBeam.append('d:Ge/ElectronSource/RotX = 180. deg')
    SimpleBeam.append('s:Ge/ElectronSource/Material = Ge/World/Material')
    SimpleBeam.append('s:Ge/ElectronSource/Color = "yellow"')
    SimpleBeam.append('sc:Ge/ElectronSource/DrawingStyle = "Solid"')
    SimpleBeam.append('')
    SimpleBeam.append('')
    SimpleBeam.append('')
    SimpleBeam.append('# Add the phantom')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('# Phantom')
    SimpleBeam.append('s:Ge/Phantom/Type = "TsBox"')
    SimpleBeam.append('s:Ge/Phantom/Parent = "World"')
    SimpleBeam.append('sc:Ge/Phantom/Material = "G4_WATER"')
    SimpleBeam.append('# We draw the phantom to be field size plus one beamlet')
    SimpleBeam.append('dc:Ge/Phantom/HLX = 75 mm')
    SimpleBeam.append('dc:Ge/Phantom/HLY = 75 mm')
    SimpleBeam.append('dc:Ge/Phantom/HLZ =  75 mm')
    SimpleBeam.append('dc:Ge/Phantom/TransX = 0. cm')
    SimpleBeam.append('dc:Ge/Phantom/TransY = 0. cm')
    SimpleBeam.append('dc:Ge/Phantom/TransZ = 70. cm')
    SimpleBeam.append('dc:Ge/Phantom/RotX = 0. deg')
    SimpleBeam.append('dc:Ge/Phantom/RotY = 0. deg')
    SimpleBeam.append('dc:Ge/Phantom/RotZ = 0. deg')
    SimpleBeam.append('ic:Ge/Phantom/XBins = 30')
    SimpleBeam.append('ic:Ge/Phantom/YBins = 30')
    SimpleBeam.append('ic:Ge/Phantom/ZBins = 30')
    SimpleBeam.append('sc:Ge/Phantom/Color    = "green"')
    SimpleBeam.append('sc:Ge/Phantom/DrawingStyle = "Solid"')
    SimpleBeam.append('')
    SimpleBeam.append('')
    SimpleBeam.append('# Add Volume scorer to phantom:')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('s:Sc/PhantomScorer/Component = "Phantom"')
    SimpleBeam.append('s:Sc/PhantomScorer/Material = "Water"')
    SimpleBeam.append('s:Sc/PhantomScorer/Quantity                  = "DoseToMedium"')
    SimpleBeam.append('b:Sc/PhantomScorer/OutputToConsole           = "FALSE"')
    SimpleBeam.append('s:Sc/PhantomScorer/IfOutputFileAlreadyExists = "Overwrite"')
    SimpleBeam.append('s:Sc/PhantomScorer/OutputType = "Binary" ')
    SimpleBeam.append('s:Sc/PhantomScorer/OutputFile                   =  "../Results/WaterTank_itt_' + str(iteration) + '"')
    SimpleBeam.append('')
    SimpleBeam.append('')
    SimpleBeam.append('# Graphics View and trajectory filters:')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('b:Gr/Enable = "False"  ')
    SimpleBeam.append('s:Gr/ViewA/Type              = "OpenGL"')
    SimpleBeam.append('d:Gr/ViewA/Theta            = 90 deg')
    SimpleBeam.append('d:Gr/ViewA/Phi              = 0 deg')
    SimpleBeam.append('u:Gr/ViewA/TransX           = 0')
    SimpleBeam.append('u:Gr/ViewA/TransY           = 0.')
    SimpleBeam.append('s:Gr/ViewA/Projection       = "Orthogonal"')
    SimpleBeam.append('d:Gr/ViewA/PerspectiveAngle = 60 deg')
    SimpleBeam.append('u:Gr/ViewA/Zoom             = 1')
    SimpleBeam.append('b:Gr/ViewA/IncludeStepPoints = "False"')
    SimpleBeam.append('b:Gr/ViewA/HiddenLineRemovalForTrajectories = "True"')
    SimpleBeam.append('')
    SimpleBeam.append('# Physics')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('sv:Ph/Default/Modules = 1 "g4em-standard_opt0"')
    SimpleBeam.append('b:Ph/ListProcesses = "False"')
    SimpleBeam.append('')
    SimpleBeam.append('------------------------------------------------------------')
    SimpleBeam.append('# QT')
    SimpleBeam.append('# --')
    SimpleBeam.append('Ts/UseQt = Gr/Enable')
    SimpleBeam.append('Ts/PauseBeforeQuit = Gr/Enable')
    SimpleBeam.append('Ts/IncludeDefaultGeant4QtWidgets = "F"')

    return [SimpleBeam], ['SimpleBeam']

if __name__ == "__main__":
    Scripts, ScriptNames = GenerateTopasScripts(".", 1)
    for i, script in enumerate(Scripts):
        filename = ScriptNames[i] + ".tps"
        f = open(filename, "w")
        for line in script:
            f.write(line)
            f.write("\n")
